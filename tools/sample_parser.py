#!/usr/bin/env python3
import sys, json, os, wave

jsonFile = sys.argv[1]
outputFile = sys.argv[2]

pitches = ("C","C#","D","D#","E","F","F#","G","G#","A","A#","B")

def get_json_data():
    global jsonFile
    with open(jsonFile, 'r') as f:
        return json.load(f)

def write_sample(fileLines, sampleEntry):
    sampleName = sampleEntry["sample"].split(".")[0]

    fileLines.append("asm(\"%s_pcm:\");\n" % sampleName)
    fileLines.append("asm(\".incbin \\\"build/audio/samples/%s.pcm\\\"\");\n" % sampleName)
    fileLines.append("asm(\".balign 4\");\n")

def write_sample_data_struct(fileLines, sampleEntry):
    global jsonFile
    wavPath = os.path.join(os.path.join(os.path.dirname(jsonFile),"samples"),sampleEntry["sample"])
    wavFile = wave.open(wavPath)
    sampleName = sampleEntry["sample"].split(".")[0]
    
    pitch = sampleEntry["pitch"]
    
    length = (2 if "#" in pitch else 1)
    pitchOctave = int(pitch[length:])
    pitchNum = pitches.index(pitch[:length]) + pitchOctave*12
    
    if "loop" in sampleEntry.keys():
        loopStart = sampleEntry["loop"][0]
        loopEnd = sampleEntry["loop"][1]
    else:
        loopStart = 0
        loopEnd = 0
    
    fileLines.append("extern const u32 %s_pcm;\n" % sampleName)
    fileLines.append("struct SampleData %s_data = {\n" % sampleName)
    fileLines.append("    /* Length */      %d,\n" % (wavFile.getnframes()-1))
    fileLines.append("    /* Sample Rate */ %d,\n" % (wavFile.getframerate()))
    fileLines.append("    /* Pitch */       %d,\n" % pitchNum)
    fileLines.append("    /* Loop Start */  %d,\n" % loopStart)
    fileLines.append("    /* Loop End */    %d,\n" % loopEnd)
    fileLines.append("    /* ROM Address */ &%s_pcm\n" % sampleName)
    fileLines.append("};\n")
    fileLines.append("\n")
    
def write_sample_file(sampleList):
    global outputFile
    fileLines = []
    fileLines.append("// DO NOT EDIT. THIS FILE IS AUTO-GENERATED BY tools/sample_parser.py. EDIT audio/sample_table.json INSTEAD.\n")
    fileLines.append("#include \"global.h\"\n")
    fileLines.append("#include \"sound.h\"\n")

    fileLines.append("\n")
    fileLines.append("asm(\".section .rodata\");\n")
    for sampleEntry in sampleList:
        write_sample(fileLines, sampleEntry)
    
    fileLines.append("\n")
    for sampleEntry in sampleList:
        write_sample_data_struct(fileLines, sampleEntry)
        
    with open(outputFile, 'w') as f:
        return f.writelines(fileLines)

def main():
    jsonData = get_json_data()
    sampleList = jsonData["samples"]
    write_sample_file(sampleList)


main()